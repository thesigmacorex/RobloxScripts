BetterLc=true --better localplayer cloning
FFTime=true --if set to true it will be the spawn location's duration if a spawnlocation exists else it will be 10 seconds if set to false will always be 10 seconds
--[[Untested]]
NetworkPeer=false --Recreates NetworkPeer
NetworkServer=false --Recreates NetworkServer
NetworkReplicator=false --Recreates NetworkReplicator
--[[]]
Respawn=false --if set to true the user will respawn in 5 seconds if set to false user will respawn in the game's respawn time and by setting to false the user can edit the respawn time by using game.Players.RespawnTime
LoadCharacter=true --Will make :LoadCharacter work in localscripts (executor too) (make LoadCharacterWithHumanoidDescription yourself)
cim=false --close inspect menu (what it does is unknown)
forcecf=false --put as true to disable spawn location and instead teleport to where the player executed the script 
fixedtool=false --Fixes non client-sided tools not being able to be used (fixed tool must be equipped) (rarely works)
inventoryfix=false --replicates inventory back (when disabled you dont lose your tools on death) (if you're expirementing and trying to find tool exploits please keep this disabled)
experimental=false --If you're a scripter and want to help us find more helpful things turn experimental on! it will clone every deleted thing and print their fullname in the console if you find something that can be of help please dm respectfilteringenabled on discord
NetworkFixer=false --instead of CREATING a client replicator it instead uses the existing one. (will not get detected by :GetChildren and :GetDescendants) and is expiremental and shouldnt be enabled unless for bug finding

function NEX()

end
NEX()
cloneref=cloneref or function(x) return x end
OldClientReplicatorInstance=game.NetworkClient.ClientReplicator
function NetworkPeer()
  task.spawn(function()
    local OldNameCall = nil

    OldNameCall = hookmetamethod(game, "__namecall", function(Self, ...)
        local Args = {...}
        local NamecallMethod = getnamecallmethod()

        if not checkcaller() and Self == game and NamecallMethod == "GetService" and Args[1] == 'NetworkPeer' then
            return game.NetworkClient
        end

        return OldNameCall(Self, ...)
    end)

  end)
  task.spawn(function()
  local OldIndex = nil

  OldIndex = hookmetamethod(game, "__index", function(Self, Key)
    if not checkcaller() and Self==game and Key == 'NetworkPeer' then
        return game.NetworkClient
    end

    return OldIndex(Self, Key)
  end)
  end)
  end
function MakeService(x)
local ser={}
ser.Name=x
ser.Parent=game
ser.ClassName=x
ser.Texture="http://www.roblox.com/asset/?id=17741196734"
function ser:Clone()
return nil
end
function ser:Destroy()
error'The parent property of this instance is locked'
end
task.spawn(function()
      local OldNameCall = nil

      OldNameCall = hookmetamethod(game, "__namecall", function(Self, ...)
          local Args = {...}
          local NamecallMethod = getnamecallmethod()

          if not checkcaller() and Self == game and NamecallMethod == "GetService" and Args[1] == x then
              return ser
          end

          return OldNameCall(Self, ...)
      end)

    end)
  task.spawn(function()
  local OldIndex = nil

  OldIndex = hookmetamethod(game, "__index", function(Self, Key)
      if not checkcaller() and Self==game and Key == x then
          return ser
      end

      return OldIndex(Self, Key)
  end)
    end)
return ser
end
function MakeReplicator(x, y)
x[y]={}
x[y].Name=y
x[y].ClassName=y
x[y].Parent=x
x[y].Texture='http://www.roblox.com/asset/?id=17741561061'
local bomb=x[y]
function bomb:GetPlayer()
return game.Players.LocalPlayer
end
end
if NetworkPeer==true then
NetworkPeer()
end
if NetworkServer==true then
local ns=MakeService'NetworkService'
MakeReplicator(ns, 'ServerReplicator')
end
if NetworkReplicator==true then
  local nr=MakeService'NetworkReplicator'
  function nr:GetPlayer()
return game.Players.LocalPlayer
  end
end
local RealOldPlayer=game.Players.LocalPlayer
local OldPlayer=Instance.new'Folder'
UserId=game.Players.LocalPlayer.UserId
Name=game.Players.LocalPlayer.Name
DName=game.Players.LocalPlayer.DisplayName
Cai=game.Players.LocalPlayer.CharacterAppearanceId
repc=game.Players.LocalPlayer.Character
oldmb=game.Players.LocalPlayer.MembershipType
underage=game.Players.LocalPlayer:GetUnder13()
for i,v in pairs(game.Players.LocalPlayer:GetChildren()) do
pcall(function()
v:Clone().Parent=OldPlayer
    end)
end
Guis=Instance.new'Folder'
Guis.Name='PlayerGui'
for i,v in pairs(game.Players.LocalPlayer.PlayerGui:GetChildren()) do
v:Clone().Parent=Guis
end
tablep=game:HttpGet'https://raw.githubusercontent.com/thesigmacorex/RobloxScripts/main/TableOfProperties' -- 160 lines of codes
Properties=loadstring(tablep)()
function spc(x, y)
for i,v in pairs(Properties) do
task.wait()
      pcall(function()
x[i]=y[i]
        end)
    end
  end
function SuperClone(x)
local new=Instance.new(x.ClassName)
spc(new, x)
for i,v in pairs(x:GetChildren()) do
      pcall(function()
      v:Clone().Parent=new
        end)
    end
  end
function MoveTo(x)
for i,v in pairs(OldPlayer:GetChildren()) do
    if BetterLc==false then
    v.Parent=x
    else
    if v.Name~='Backpack' then
    v.Parent=x
      end
    end
  end
Guis.Parent=game.CoreGui
end
function AntiConsoleLag()
  if experimental==true then
pcall(function()
while task.wait() do
game:FindService'LogService':ClearOutput()
  end
    end)
  end
  end
function DisableCustomConsole()
    pcall(function()
for i,v in pairs(getconnections(game:FindService'LogService'.MessageOut)) do
v:Disable()
  end
      end)
  end

function Player()
if BetterLc==false then
local d=Instance.new'Player'
spc(d, game.Players.LocalPlayer)
d.UserId=UserId
d.Name=Name
d.DisplayName=DName
d.CharacterAppearanceId=Cai
d.Character=repc
d.Parent=game.Players
MoveTo(d)
  task.spawn(function()
  local OldIndex = nil

  OldIndex = hookmetamethod(game.Players, "__index", function(Self, Key)
      if not checkcaller() and Self==game.Players and Key == "LocalPlayer" then
          return d
      end

      return OldIndex(Self, Key)
  end)
    end)
    task.spawn(function()
     DisableCustomConsole()
     AntiConsoleLag()
      end)
elseif BetterLc==true then
game.Players:ResetLocalPlayer()
local d=game.Players:CreateLocalPlayer()
  game.Players:SetLocalPlayerInfo(UserId, Name, DName, oldmb, underage)
  d.CharacterAppearanceId=Cai
  d.Character=repc
  MoveTo(d)
  d.Parent=game.Players
end
  return d
end 
function streamingenabled()
task.spawn(function()
while task.wait() do
workspace.StreamingEnabled=true
      end
    end)
end
if experimental==true then
  local sets=settings()
  local netw=sets.Network
  streamingenabled()
  netw.RenderStreamedRegions=true --game info for streamingenabled games
  netw.RandomizeJoinInstanceOrder=true --to show whatt happpens overtime
  netw.ShowActiveAnimationAsset=true --animations seem to be weird so this might help
  netw.PrintPhysicsErrors=true --serversided parts physics dont seem to work
  game.DescendantRemoving:Connect(function(x)
      print(x:GetFullName())
      local clone = x:Clone()
      if clone~=nil then
      clone.Parent = x.Parent
      end
  end)
end
--If you find a way to clone game.NetworkClient.ClientReplicator (protected instance) or change it's parent (automatically destroyed on kick and replaced with a RemoteEvent instance) dm respectfilteringenabled on discord 
--code (my coding style is pretty bad so dont try to edit anything unless you're a professional)

function rep()
pcall(function() --real roblox source (some executors disable AddCoreLocalScript)
      -- Creates all neccessary scripts for the gui on initial load, everything except build tools
      -- Created by Ben T. 10/29/10
      -- Please note that these are loaded in a specific order to diminish errors/perceived load time by user
      local scriptContext = game:GetService("ScriptContext")
      local touchEnabled = game:GetService("UserInputService").TouchEnabled

      local RobloxGui = game:GetService("CoreGui"):WaitForChild("RobloxGui")

      local soundFolder = Instance.new("Folder")
      soundFolder.Name = "Sounds"
      soundFolder.Parent = RobloxGui

      -- This can be useful in cases where a flag configuration issue causes requiring a CoreScript to fail
      local function safeRequire(moduleScript)
        local moduleReturnValue = nil
        local success, err = pcall(function() moduleReturnValue = require(moduleScript) end)
        if not success then
          warn("Failure to Start CoreScript module" ..moduleScript.Name.. ".\n" ..err)
        end
        return moduleReturnValue
      end

      -- TopBar
      scriptContext:AddCoreScriptLocal("CoreScripts/Topbar", RobloxGui)

      -- MainBotChatScript (the Lua part of Dialogs)
      scriptContext:AddCoreScriptLocal("CoreScripts/MainBotChatScript2", RobloxGui)

      -- In-game notifications script
      scriptContext:AddCoreScriptLocal("CoreScripts/NotificationScript2", RobloxGui)

      -- Performance Stats Management
      scriptContext:AddCoreScriptLocal("CoreScripts/PerformanceStatsManagerScript",
        RobloxGui)

      -- Chat script
      spawn(function() safeRequire(RobloxGui.Modules.ChatSelector) end)
      spawn(function() safeRequire(RobloxGui.Modules.PlayerlistModule) end)

      -- Purchase Prompt Script
      scriptContext:AddCoreScriptLocal("CoreScripts/PurchasePromptScript2", RobloxGui)

      -- Prompt Block Player Script
      scriptContext:AddCoreScriptLocal("CoreScripts/BlockPlayerPrompt", RobloxGui)
      scriptContext:AddCoreScriptLocal("CoreScripts/FriendPlayerPrompt", RobloxGui)

      -- Avatar Context Menu
      scriptContext:AddCoreScriptLocal("CoreScripts/AvatarContextMenu", RobloxGui)

      -- Backpack!
      spawn(function() safeRequire(RobloxGui.Modules.BackpackScript) end)

      scriptContext:AddCoreScriptLocal("CoreScripts/VehicleHud", RobloxGui)

      scriptContext:AddCoreScriptLocal("CoreScripts/GamepadMenu", RobloxGui)

      if touchEnabled then -- touch devices don't use same control frame
        -- only used for touch device button generation
        scriptContext:AddCoreScriptLocal("CoreScripts/ContextActionTouch", RobloxGui)

        RobloxGui:WaitForChild("ControlFrame")
        RobloxGui.ControlFrame:WaitForChild("BottomLeftControl")
        RobloxGui.ControlFrame.BottomLeftControl.Visible = false
      end

      spawn(function()
        local VRService = game:GetService('VRService')
        local function onVREnabledChanged()
          if VRService.VREnabled then
            safeRequire(RobloxGui.Modules.VR.VirtualKeyboard)
            safeRequire(RobloxGui.Modules.VR.UserGui)
          end
        end
        onVREnabledChanged()
        VRService:GetPropertyChangedSignal("VREnabled"):connect(onVREnabledChanged)
      end)

      -- Boot up the VR App Shell
      if UserSettings().GameSettings:InStudioMode() then
        local VRService = game:GetService('VRService')
        local function onVREnabledChanged()
          if VRService.VREnabled then
            local shellInVRSuccess, shellInVRFlagValue = pcall(function() return settings():GetFFlag("EnabledAppShell3D") end)
            local shellInVR = (shellInVRSuccess and shellInVRFlagValue == true)
            local modulesFolder = RobloxGui.Modules
            local appHomeModule = modulesFolder:FindFirstChild('Shell') and modulesFolder:FindFirstChild('Shell'):FindFirstChild('AppHome')
            if shellInVR and appHomeModule then
              safeRequire(appHomeModule)
            end
          end
        end

        spawn(function()
          if VRService.VREnabled then
            onVREnabledChanged()
          end
          VRService:GetPropertyChangedSignal("VREnabled"):connect(onVREnabledChanged)
        end)
      end
    end)
end
e = Instance.new'Folder'
e.Name = 'PlayerScripts'
for i, v in pairs(game.Players.LocalPlayer.PlayerScripts:GetChildren()) do
  v.Archivable = true
  v:Clone().Parent = e
end
oldchar=game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
old = oldchar.PrimaryPart.CFrame
function cleartools()
for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
    if v:IsA('Tool') then v:Destroy()
    end
  end
    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
      if v:IsA('Tool') then v:Destroy()
      end
  end
end
function bringtools()
local sp = game.Players.LocalPlayer.StarterGear
for i,v in pairs(sp:GetChildren()) do
    if v:IsA'Tool' then
v:Clone().Parent=game.Players.LocalPlayer.Backpack
  end
  end
end
function fixtools(y)
cleartools()
bringtools()
for i,v in pairs(y:GetChildren()) do
if v:IsA'Tool' then
v.Parent=game.Players.LocalPlayer.Backpack
    end
  end
end
local function p()
  task.defer(function()
  for i, v in pairs(e:GetDescendants()) do
    if v:IsA 'LocalScript' then
      v.Disabled = false
    end
    e.Parent = game.Players.LocalPlayer.Character
  end
end)
  task.defer(function()
    while task.wait() do
      game:GetService("GuiService"):ClearError()
    end
  end)

  local Player = game:GetService("Players").LocalPlayer

  local RealCharacter = Player.Character or Player.CharacterAdded:Wait()

  RealCharacter.Archivable = true
  local FakeCharacter = RealCharacter:Clone()
  local Part
  Part = Instance.new("Part", workspace)
  Part.Anchored = true
  Part.Size = Vector3.new(200, 1, 200)
  Part.CFrame = CFrame.new(0, -500, 0)
  Part.CanCollide = true
  FakeCharacter.Parent = workspace
  FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)

  for i, v in pairs(RealCharacter:GetChildren()) do
    if v:IsA("LocalScript") then
      local clone = v:Clone()
      clone.Disabled = true
      clone.Parent = FakeCharacter
    end
  end
  for i, v in pairs(RealCharacter.PrimaryPart:GetChildren()) do
    if v:IsA("Sound") then
      v.Archivable = true
      v:Clone().Parent = FakeCharacter
    end
  end
  local PseudoAnchor
  game:GetService("RunService").RenderStepped:Connect(function()
    if PseudoAnchor ~= nil then
      PseudoAnchor.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
    end
  end)

  PseudoAnchor = FakeCharacter.HumanoidRootPart

  local function Invisible()
    local StoredCF = RealCharacter.HumanoidRootPart.CFrame
    RealCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame
    FakeCharacter.HumanoidRootPart.CFrame = StoredCF
    FakeCharacter:WaitForChild("Humanoid").DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
    Player.Character = FakeCharacter
    if fixedtool==true then
    fixtools(RealCharacter)
    end
    FakeCharacter.Humanoid.Health = FakeCharacter.Humanoid.MaxHealth
    workspace.CurrentCamera.CameraSubject = FakeCharacter.Humanoid
    PseudoAnchor = RealCharacter.HumanoidRootPart
    for i, v in pairs(FakeCharacter:GetChildren()) do
      if v:IsA("LocalScript") then
        v.Disabled = false
      end
    end
  end

  Invisible()
  return FakeCharacter
end

repeat wait() until (not game.NetworkClient:FindFirstChild('ClientReplicator'))
task.spawn(function()
if game.Players:FindFirstChild(game.Players.LocalPlayer.Name)==nil then
Player()
end
  end)
if LoadCharacter==true then
task.spawn(function()
      local OldNamecall
        OldNamecall = hookmetamethod(game.Players.LocalPlayer, "__namecall", newcclosure(function(self, ...)
          local g = getnamecallmethod()
          if g=='LoadCharacter' then cleartools() return p()
          end
          return OldNamecall(self, ...)
        end))
    end)
end
if cim ==true then
  task.spawn(function()
while task.wait() do
        game.GuiService:CloseInspectMenu()
      end
    end)
end
task.defer(function()
  for i, v in pairs(e:GetDescendants()) do
    if v:IsA 'LocalScript' then
      v.Disabled = false
    end
    e.Parent = game.Players.LocalPlayer.Character
  end
end)

task.defer(function()
  while task.wait() do
    game:GetService("GuiService"):ClearError()
  end
end)
rep()
if NetworkFixer~= true then
task.spawn(function()
  local function setupClientReplicator()
      local ClientReplicator = Instance.new('RemoteEvent')
      ClientReplicator.Parent = game.NetworkClient
      ClientReplicator.Name = 'ClientReplicator'

      local OldNamecall
      OldNamecall = hookmetamethod(ClientReplicator, "__namecall", newcclosure(function(self, ...)
          local g = getnamecallmethod()
          if g == 'GetPlayer' then
              return game.Players.LocalPlayer
          end
          return OldNamecall(self, ...)
      end))

      local OldIndex = nil
      OldIndex = hookmetamethod(game, "__index", function(Self, Key)
          if not checkcaller() and Self == ClientReplicator and Key == "ClassName" then
              return 'ClientReplicator'
          end
          return OldIndex(Self, Key)
      end)
  end

  setupClientReplicator()
end)
else
  task.spawn(function()
      local OldIndex = nil
          OldIndex = hookmetamethod(game.NetworkClient, "__index", function(Self, Key)
              if not checkcaller() and Self == game.NetworkClient and Key == "ClientReplicator" then
                  return OldClientReplicatorInstance
              end
              return OldIndex(Self, Key)
          end)
      end)
  DisableCustomConsole()
    end
local Player = game:GetService("Players").LocalPlayer
Sp = Player.RespawnLocation
pcall(function()
  Sp.CanCollide = false
end)
local RealCharacter = Player.Character or Player.CharacterAdded:Wait()
local IsInvisible = false
RealCharacter.Archivable = true
local FakeCharacter = RealCharacter:Clone()
local Part
Part = Instance.new("Part", workspace)
Part.Anchored = true
Part.Size = Vector3.new(200, 1, 200)
Part.CFrame = CFrame.new(0, -500, 0)
Part.CanCollide = true
FakeCharacter.Parent = workspace
FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
for i, v in pairs(RealCharacter:GetChildren()) do
  if v:IsA("LocalScript") then
    local clone = v:Clone()
    clone.Disabled = true
    clone.Parent = FakeCharacter
  end
end
for i, v in pairs(RealCharacter.PrimaryPart:GetChildren()) do
  if v:IsA("Sound") then
    v.Archivable = true
    v:Clone().Parent = FakeCharacter
  end
end
local CanInvis = true
local PseudoAnchor
game:GetService "RunService".RenderStepped:Connect(
  function()
    if PseudoAnchor ~= nil then
      PseudoAnchor.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
    end
  end
)

PseudoAnchor = FakeCharacter.HumanoidRootPart
local function Invisible()
  local StoredCF = RealCharacter.HumanoidRootPart.CFrame
  RealCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame
  FakeCharacter.HumanoidRootPart.CFrame = StoredCF
  FakeCharacter:WaitForChild("Humanoid").DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
  Player.Character = FakeCharacter
  if fixedtool==true then
  fixtools(RealCharacter)
  end
  FakeCharacter.Humanoid.Health = FakeCharacter.Humanoid.MaxHealth
  workspace.CurrentCamera.CameraSubject = FakeCharacter.Humanoid
  PseudoAnchor = RealCharacter.HumanoidRootPart
  for i, v in pairs(FakeCharacter:GetChildren()) do
    if v:IsA("LocalScript") then
      v.Disabled = false
    end
  end
  RealCharacter:Destroy()
end
died = false

function ff(x)
  local f = Instance.new('ForceField')
  f.Parent = x
  if FFTime == false then
  wait(10)
  elseif FFTime==true then
  if Sp~=nil then
  if Sp.Duration>0 then
  wait(Sp.Duration)
      end
    else
  wait(10)
    end
  end
  f:Destroy()
end

function c()
  if FakeCharacter.Humanoid.Health <= 0 and died == false then
    died = true
    if FakeCharacter.PrimaryPart:FindFirstChild('Died') then
      FakeCharacter.PrimaryPart.Died:Play()
    end
      if Respawn==true then
      wait(5)
      elseif Respawn==false then
      wait(tonumber(game.Players.RespawnTime))
      end
    if not game.Players.LocalPlayer.RespawnLocation == nil and forcecf==false then
FakeCharacter:MoveTo(game:GetService("Players").LocalPlayer.RespawnLocation.Position)
    else
      FakeCharacter.PrimaryPart.CFrame = old
    end
    if inventoryfix==true then
    cleartools()
    end
    pcall(function()
    FakeCharacter.Humanoid:UnequipTools()
      end)
    e.Parent=game.ReplicatedStorage
    local fk = p()
    fk.Humanoid:UnequipTools()
    FakeCharacter:Remove()
    FakeCharacter = fk
    e.Parent=FakeCharacter
    ff(FakeCharacter)
    if inventoryfix==true then
    bringtools()
    end
    died = false
  end
end

Invisible()
while task.wait() do
  c()
end
